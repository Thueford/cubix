#pragma kernel InitOne
#pragma kernel Init
#pragma kernel UpdateOne
#pragma kernel Update
#pragma kernel EmitOne

#define THREADS 256

#include "./Particle.cginc"

float c : SV_DispatchThreadID;
float rand(float3 o) {
    return frac(sin(dot(o*c, float3(12.9898, 78.233, 45.5432))) * 43758.5453);
}
float ran(float3 o) {
    return 2 * rand(o) - 1;
}


RWStructuredBuffer<Particle> _Particles;
AppendStructuredBuffer<uint> _Dead;
ConsumeStructuredBuffer<uint> _Alive;


float3 _ParentPosition;
float _DeltaTime;

// limited to 65536 threadgroups
[numthreads(1, 1, 1)]
void InitOne(uint3 id : SV_DispatchThreadID)
{
    _Particles[id.x].life = 0;
    _Dead.Append(id.x);
}

[numthreads(THREADS, 1, 1)]
void Init(uint3 id : SV_DispatchThreadID)
{
    //InitOne(id);
}

void DoUpdate(uint3 id)
{
    Particle p = _Particles[id.x];
    if (p.life.y == 0) return;
    
    if (p.life.x < _DeltaTime)
    {
        _Dead.Append(id.x);
        _Particles[id.x].life.y = 0;
        return;
    }
    
    p.life.x -= _DeltaTime;
    p.pos += p.vel * _DeltaTime;

    _Particles[id.x] = p;
}

[numthreads(1, 1, 1)]
void UpdateOne(uint3 id : SV_DispatchThreadID)
{
    DoUpdate(id);
}

[numthreads(THREADS, 1, 1)]
void Update(uint3 id : SV_DispatchThreadID)
{
    DoUpdate(id);
}

int _Flags;
float4 _Seeds;
float _Lifetime;

float3 _PosOffset;
float3 _PosScale;

float3 _SpdOffset;
float3 _SpdScale;

float _SpdPosFac;

float4 _Color;

#define F(X) (_Flags & X)

float3 sqrNormalize(float3 v) {
    float3 av = abs(v);
    return v / max(max(av.x, av.y), av.z);
}

[numthreads(1, 1, 1)]
void EmitOne()
{
    uint id = _Alive.Consume();
    Particle p = _Particles[id];
    c = id + 1;

    p.life = _Lifetime;
    
    float f;
    
    // position
    float3 dpos = float3(ran(_Seeds.xzy), ran(_Seeds.yxz), ran(_Seeds.zyx));
    if (F(P_POSSHP)) dpos = normalize(PI * sin(dpos));
    else dpos = sqrNormalize(dpos);
    p.pos = dpos * (_PosOffset + _PosScale * rand(_Seeds.wxy));
    
    // velocity
    float3 dspd = float3(ran(_Seeds.xyz), ran(_Seeds.yzx), ran(_Seeds.zxy));
    if (F(P_SPDSHP)) dspd = normalize(PI * sin(dspd));
    else dspd = sqrNormalize(dspd);
    p.vel = _SpdOffset.xyz + dspd * _SpdScale.xyz;
    
    p.color = lerp(_Color, 1, rand(_Seeds.xxz));
    p.color.a = _Color.a;
    
    _Particles[id] = p;
}